import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { BookOpen, Edit3, Volume2, ChevronLeft, ChevronRight, Lightbulb, Star } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/hooks/use-toast';
import { type LessonNotebook as LessonNotebookType, VocabularyEntry, Correction } from '@/types/lessonNotebook';

interface LessonNotebookProps {
  lessonId: string;
  lessonTitle: string;
  conversationHistory: any[];
  userLevel: string;
  onNewNotesGenerated?: () => void;
}

export function LessonNotebook({ 
  lessonId, 
  lessonTitle, 
  conversationHistory, 
  userLevel,
  onNewNotesGenerated 
}: LessonNotebookProps) {
  const [notebook, setNotebook] = useState<LessonNotebookType | null>(null);
  const [personalNotes, setPersonalNotes] = useState('');
  const [isLoadingNotes, setIsLoadingNotes] = useState(false);
  const [hasNewNotes, setHasNewNotes] = useState(false);

  // Load existing notebook data
  useEffect(() => {
    loadNotebook();
  }, [lessonId]);

  // Auto-save personal notes
  useEffect(() => {
    if (notebook && personalNotes !== notebook.personalNotes) {
      const timer = setTimeout(() => {
        savePersonalNotes();
      }, 1000);
      return () => clearTimeout(timer);
    }
  }, [personalNotes, notebook]);

  const loadNotebook = async () => {
    try {
      const { data, error } = await supabase
        .from('lesson_notebooks')
        .select('*')
        .eq('lesson_id', lessonId)
        .maybeSingle();

      if (error) throw error;

      if (data) {
        // Map database fields to interface fields
        const notebookData: LessonNotebookType = {
          lessonId: data.lesson_id,
          date: data.created_at.split('T')[0],
          lessonTitle: data.lesson_title,
          autoGeneratedNotes: data.auto_notes || '',
          personalNotes: data.personal_notes || '',
          vocabularyLearned: (data.vocabulary_json as any) || [],
          corrections: (data.corrections_json as any) || [],
          achievements: (data.achievements_json as any) || [],
          culturalMoments: (data.cultural_moments_json as any) || [],
          practiceGuidance: data.practice_guidance || ''
        };
        
        setNotebook(notebookData);
        setPersonalNotes(notebookData.personalNotes);
      }
    } catch (error) {
      console.error('Error loading notebook:', error);
    }
  };

  const generateLessonSummary = async () => {
    if (!conversationHistory.length) return;

    setIsLoadingNotes(true);
    try {
      const { data, error } = await supabase.functions.invoke('ai-lesson-summary', {
        body: {
          conversationHistory,
          userLevel,
          lessonTitle,
          lessonId
        }
      });

      if (error) throw error;

      const newNotebook: LessonNotebookType = {
        lessonId,
        date: new Date().toISOString().split('T')[0],
        lessonTitle,
        autoGeneratedNotes: data.summary,
        personalNotes: personalNotes,
        vocabularyLearned: data.vocabulary || [],
        corrections: data.corrections || [],
        achievements: data.achievements || [],
        culturalMoments: data.culturalMoments || [],
        practiceGuidance: data.practiceGuidance || ''
      };

      setNotebook(newNotebook);
      setHasNewNotes(true);
      
      // Save to database
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) throw new Error('User not authenticated');

      await supabase
        .from('lesson_notebooks')
        .upsert({
          lesson_id: lessonId,
          lesson_title: lessonTitle,
          user_id: user.id,
          auto_notes: data.summary,
          personal_notes: personalNotes,
          vocabulary_json: data.vocabulary,
          corrections_json: data.corrections,
          achievements_json: data.achievements,
          cultural_moments_json: data.culturalMoments,
          practice_guidance: data.practiceGuidance,
          created_at: new Date().toISOString()
        });

      onNewNotesGenerated?.();
      
      toast({
        title: "📓 Lesson Summary Generated!",
        description: "Your lesson notes have been automatically created and saved."
      });

    } catch (error) {
      console.error('Error generating lesson summary:', error);
      toast({
        title: "Error",
        description: "Failed to generate lesson summary. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsLoadingNotes(false);
    }
  };

  const savePersonalNotes = async () => {
    if (!notebook) return;

    try {
      // Get current user ID
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) return;

      await supabase
        .from('lesson_notebooks')
        .update({ personal_notes: personalNotes })
        .eq('lesson_id', lessonId)
        .eq('user_id', user.id);
    } catch (error) {
      console.error('Error saving personal notes:', error);
    }
  };

  const playPronunciation = async (pronunciation: string) => {
    try {
      const { data, error } = await supabase.functions.invoke('text-to-speech', {
        body: {
          text: pronunciation,
          voice: 'nova'
        }
      });

      if (error) throw error;

      if (data?.audioUrl) {
        const audio = new Audio(data.audioUrl);
        audio.play();
      }
    } catch (error) {
      console.error('Error playing pronunciation:', error);
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  if (!notebook && !conversationHistory.length) {
    return (
      <div className="h-full flex items-center justify-center text-center p-8">
        <div className="space-y-4">
          <BookOpen className="h-16 w-16 text-muted-foreground mx-auto" />
          <h3 className="text-xl font-semibold text-foreground">Your Lesson Notebook</h3>
          <p className="text-muted-foreground max-w-md">
            Start a conversation with Razia, and your lesson notes will automatically appear here!
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full flex flex-col">
      {/* Header */}
      <div className="p-6 border-b border-border">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-primary/10 rounded-lg">
              <BookOpen className="h-5 w-5 text-primary" />
            </div>
            <div>
              <h2 className="text-xl font-semibold text-foreground">📓 My Lesson Notes</h2>
              <p className="text-sm text-muted-foreground">
                {notebook ? formatDate(notebook.date) : 'Generate your first lesson summary'}
              </p>
            </div>
          </div>
          
          {conversationHistory.length > 0 && !notebook && (
            <Button 
              onClick={generateLessonSummary} 
              disabled={isLoadingNotes}
              className="flex items-center gap-2"
            >
              {isLoadingNotes ? (
                <>
                  <div className="animate-spin h-4 w-4 border-2 border-current border-t-transparent rounded-full" />
                  Generating...
                </>
              ) : (
                <>
                  <Star className="h-4 w-4" />
                  Generate Summary
                </>
              )}
            </Button>
          )}
        </div>
      </div>

      <ScrollArea className="flex-1">
        <div className="p-6 space-y-6">
          {notebook ? (
            <>
              {/* Auto-Generated Section */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="space-y-4"
              >
                <Card className="bg-gradient-to-br from-blue-50 to-indigo-50 border-blue-200">
                  <CardContent className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-lg font-semibold text-blue-900 flex items-center gap-2">
                        <Star className="h-5 w-5" />
                        Today's Lesson Summary
                      </h3>
                      <Badge variant="secondary" className="text-xs">
                        Auto-generated
                      </Badge>
                    </div>
                    
                    <div className="prose prose-sm max-w-none text-blue-800">
                      <div className="whitespace-pre-wrap">{notebook.autoGeneratedNotes}</div>
                    </div>
                  </CardContent>
                </Card>

                {/* Vocabulary Section */}
                {notebook.vocabularyLearned.length > 0 && (
                  <Card>
                    <CardContent className="p-6">
                      <h4 className="font-semibold text-foreground mb-4 flex items-center gap-2">
                        <BookOpen className="h-4 w-4" />
                        📚 New Words You Learned
                      </h4>
                      
                      <div className="space-y-3">
                        {notebook.vocabularyLearned.map((word, index) => (
                          <div key={index} className="flex items-center justify-between bg-muted/50 p-4 rounded-lg">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="font-medium text-foreground">{word.term}</span>
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => playPronunciation(word.term)}
                                  className="h-6 w-6 p-0"
                                >
                                  <Volume2 className="h-3 w-3" />
                                </Button>
                              </div>
                              <p className="text-sm text-muted-foreground">{word.definition}</p>
                              {word.exampleSentence && (
                                <p className="text-xs text-muted-foreground italic mt-1">
                                  "{word.exampleSentence}"
                                </p>
                              )}
                            </div>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                )}

                {/* Corrections Section */}
                {notebook.corrections.length > 0 && (
                  <Card>
                    <CardContent className="p-6">
                      <h4 className="font-semibold text-foreground mb-4 flex items-center gap-2">
                        <Lightbulb className="h-4 w-4" />
                        📝 Corrections to Remember
                      </h4>
                      
                      <div className="space-y-3">
                        {notebook.corrections.map((correction, index) => (
                          <div key={index} className="bg-orange-50 border border-orange-200 p-4 rounded-lg">
                            <div className="space-y-2">
                              <div className="flex items-start gap-2">
                                <span className="text-sm text-orange-700 font-medium">You said:</span>
                                <span className="text-sm text-orange-600 line-through">"{correction.original}"</span>
                              </div>
                              <div className="flex items-start gap-2">
                                <span className="text-sm text-green-700 font-medium">Try:</span>
                                <span className="text-sm text-green-600 font-medium">"{correction.corrected}"</span>
                              </div>
                              <div className="text-xs text-muted-foreground mt-2">
                                💡 {correction.explanation}
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </CardContent>
                  </Card>
                )}
              </motion.div>

              <Separator />
            </>
          ) : (
            conversationHistory.length > 0 && (
              <div className="text-center py-8">
                <Button 
                  onClick={generateLessonSummary} 
                  disabled={isLoadingNotes}
                  size="lg"
                  className="flex items-center gap-2"
                >
                  {isLoadingNotes ? (
                    <>
                      <div className="animate-spin h-5 w-5 border-2 border-current border-t-transparent rounded-full" />
                      Generating your lesson summary...
                    </>
                  ) : (
                    <>
                      <Star className="h-5 w-5" />
                      Generate Today's Lesson Summary
                    </>
                  )}
                </Button>
              </div>
            )
          )}

          {/* Personal Notes Section */}
          <Card>
            <CardContent className="p-6">
              <h3 className="text-lg font-semibold text-foreground mb-4 flex items-center gap-2">
                <Edit3 className="h-4 w-4" />
                ✍️ My Personal Notes
              </h3>
              
              <Textarea
                placeholder="Add your own thoughts about today's lesson...

What did you find most interesting?
What will you practice this week?
Any cultural insights you discovered?"
                className="min-h-[120px] resize-none"
                value={personalNotes}
                onChange={(e) => setPersonalNotes(e.target.value)}
              />
              
              <div className="text-xs text-muted-foreground mt-2 flex items-center gap-2">
                <div className="flex items-center gap-1">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  Auto-saves as you type
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </ScrollArea>
    </div>
  );
}